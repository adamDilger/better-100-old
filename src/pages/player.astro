---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Better 100">
  <main class="flex flex-col container mx-auto h-full py-7">
		<div class="relative">
			<h1 class="text-4xl font-bold text-center text-red-600 mb-4">better 100</h1>
			<div class="absolute top-0 right-0 bg-white px-3">
				<div class="text-4xl font-bold text-red-500" id="count"></div>
			</div>
		</div>

		<div class="flex flex-col justify-center items-center">
			<div id="player" style="height: 80vh; width: 100%"></div>
			<p id="voted-by" class="text-lg font-light mt-3"></p>
		</div>


    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode!.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player: YT.Player;
			(window as any).onYouTubeIframeAPIReady = onYouTubeIframeAPIReady;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
					// videoId: 'ipe8cfJNt_o',
					playerVars: {
						// playsinline: 1,
						// controls: 0,
						rel: 0,
						enablejsapi: 1
					},
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
			}

      // 4. The API will call this function when the video player is ready.
			async function onPlayerReady(_event: any) {
				console.log('onPlayerReady');
				const firstSong = await nextSong();
				update(firstSong);
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      async function onPlayerStateChange(event: YT.OnStateChangeEvent) {
				console.log('onPlayerStateChange', event);

				if (event.data == YT.PlayerState.PLAYING) {
					console.log('video playing');
				}

				if (event.data == YT.PlayerState.ENDED) {
					console.log('video ended');
					const nextVote = await markComplete();
					update(nextVote);
        }
      }

			async function nextSong() {
				const  res = await fetch('/api/vote/next.json');
				const data = await res.json() as Vote;
				console.log(data);

				return data;
			}

			/**
			 * Mark the current vote as complete
			 * @returns {Promise<Vote>}
			 */
			async function markComplete() {
				const  res = await fetch('/api/vote/complete.json');
				const data = await res.json() as Vote;
				console.log(data);

				return data;
			}

			type Vote = {
				id: number;
				title: string;
				videoId: string;
				personName: string;
				count: number;
			}

			function update(vote: Vote) {
				console.log('update', vote);
				player.loadVideoById(vote.videoId);
				document.getElementById('voted-by')!.innerText = `Voted by ${vote.personName}`;
				document.getElementById('count')!.innerText = vote.count.toString();
			}
    </script>

	</main>
</Layout>
